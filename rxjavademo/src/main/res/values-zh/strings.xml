<resources>
    <string name="app_name">RxJava 示例</string>

    <string name="navigation_drawer_open">Open navigation drawer</string>
    <string name="navigation_drawer_close">Close navigation drawer</string>

    <string name="action_settings">设置</string>
    <string name="communicate">沟通交流</string>
    <string name="action_share">分享</string>
    <string name="action_send">发送示例APK</string>
    <string name="api">API 示例</string>
    <string name="sample">场景示例</string>

    <string name="source_code">源码：https://github.com/leeowenowen/rxjava-examples.git</string>
    <string name="dev_by">开发者：王利 (阿里巴巴UCU盟)</string>


    <string name="desc_utility_materialize">将数据项和事件通知都当做数据项发射，Dematerialize刚好相反</string>
    <string name="desc_utility_timestamp">给Observable发射的数据项附加一个时间戳</string>
    <string name="desc_utility_serialize">强制一个Observable连续调用并保证行为正确.一个Observable可以异步调用它的观察者的方法，可能是从不同的线程调用。这可能会让Observable行为不正确，它可能会在某一个onNext调用之前尝试调用onCompleted或onError方法，或者从两个不同的线程同时调用onNext方法。使用Serialize操作符，你可以纠正这个Observable的行为，保证它的行为是正确的且是同步的。</string>
    <string name="desc_utility_cache">记住Observable发射的数据序列并发射相同的数据序列给后续的订阅者.</string>
    <string name="desc_utility_observeOn">指定观察者观察Observable的调度器</string>
    <string name="desc_utility_subscribeOn">指定Observable执行任务的调度器,
        OnSubscribe内部执行的逻辑就是在这个Scheduler上.</string>
    <string name="desc_utility_doOnEach">注册一个动作，对Observable发射的每个数据项使用</string>
    <string name="desc_utility_doOnCompleted">注册一个动作，对正常完成的Observable使用</string>
    <string name="desc_utility_doOnError">注册一个动作，对发生错误的Observable使用</string>
    <string name="desc_utility_doOnTerminate">注册一个动作，对完成的Observable使用，无论是否发生错误</string>
    <string name="desc_utility_doOnSubscribe">注册一个动作，在观察者订阅时使用</string>
    <string name="desc_utility_doOnUnsubscribe">注册一个动作，在观察者取消订阅时使用</string>
    <string name="desc_utility_finallyDo">注册一个动作，在Observable完成时使用</string>
    <string name="desc_utility_delay">延时发射Observable的结果</string>
    <string name="desc_utility_delaySubscription">延时处理订阅请求</string>
    <string name="desc_utility_timeInterval">定期发射数据</string>
    <string name="desc_utility_using">创建一个只在Observable生命周期存在的资源</string>
    <string name="desc_utility_single">强制返回单个数据，否则抛出异常</string>
    <string name="desc_utility_singleOrDefault">如果Observable完成时返回了单个数据，就返回它，否则返回默认数据</string>

    <string name="desc_transformation_map"> 对序列的每一项都应用一个函数来变换Observable发射的数据序列</string>
    <string name="desc_transformation_flatMap">将Observable发射的数据集合变换为Observables集合，然后将这些Observable
        发射的数据平坦化的放进一个单独的Observable,其结果是无需的.</string>
    <string name="desc_transformation_concatMap">将Observable发射的数据集合变换为Observables
        集合，然后将这些Observable发射的数据平坦化的放进一个单独的Observable,最终发射的数据集合与Observable的连接顺序一致.</string>
    <string name="desc_transformation_flatMapIterable">将Observable发射的数据集合变换为Observables集合，然后将这些Observable发射的数据平坦化的放进一个单独的Observable</string>
    <string name="desc_transformation_switchMap">将Observable发射的数据集合变换为Observables集合，然后只发射这些Observables最近发射的数据</string>
    <string name="desc_transformation_scan">对Observable发射的每一项数据应用一个函数，然后按顺序依次发射每一个值</string>
    <string name="desc_transformation_groupBy">将Observable分拆为Observable集合，将原始Observable发射的数据按Key分组，每一个Observable发射一组不同的数据</string>
    <string name="desc_transformation_buffer">它定期从Observable收集数据到一个集合，然后把这些数据集合打包发射，而不是一次发射一个</string>
    <string name="desc_transformation_window"> 定期将来自Observable的数据分拆成一些Observable窗口，然后发射这些窗口，而不是每次发射一项</string>
    <string name="desc_transformation_cast"> 在发射之前强制将Observable发射的所有数据转换为指定类型</string>

    <string name="desc_subject_async">一个AsyncSubject只在原始Observable完成后，发射来自原始Observable的最后一个值。（如果原始Observable没有发射任何值，AsyncObject也不发射任何值）它会把这最后一个值发射给任何后续的观察者。</string>
    <string name="desc_subject_behavior">当观察者订阅BehaviorSubject时，它开始发射原始Observable最近发射的数据（如果此时还没有收到任何数据，它会发射一个默认值），然后继续发射其它任何来自原始Observable的数据。 </string>
    <string name="desc_subject_behavior_with_init_value">当观察者订阅BehaviorSubject时，它开始发射原始Observable最近发射的数据（如果此时还没有收到任何数据，它会发射一个默认值），然后继续发射其它任何来自原始Observable的数据。 </string>
    <string name="desc_subject_publish">PublishSubject
        只会把在订阅发生的时间点之后来自原始Observable的数据发射给观察者,它与BehaviorSubject差别在在订阅时是否发射订阅之前的最后一个数据</string>
    <string name="desc_subject_replay">ReplaySubject会发射所有来自原始Observable的数据给观察者，无论它们是何时订阅的。也有其它版本的ReplaySubject，在重放缓存增长到一定大小的时候或过了一段时间后会丢弃旧的数据（原始Observable发射的）。
如果你把ReplaySubject当作一个观察者使用，注意不要从多个线程中调用它的onNext方法（包括其它的on系列方法），这可能导致同时（非顺序）调用，这会违反Observable协议，给Subject的结果增加了不确定性。</string>
    <string name="desc_subject_replay_create_with_time">ReplaySubject会发射所有来自原始Observable的数据给观察者，无论它们是何时订阅的。也有其它版本的ReplaySubject，在重放缓存增长到一定大小的时候或过了一段时间后会丢弃旧的数据（原始Observable发射的）。
如果你把ReplaySubject当作一个观察者使用，注意不要从多个线程中调用它的onNext方法（包括其它的on系列方法），这可能导致同时（非顺序）调用，这会违反Observable协议，给Subject的结果增加了不确定性。</string>


    <string name="desc_string_byline">将一个字符串的Observable转换为一个行序列的Observable，这个Observable将原来的序列当做流处理，然后按换行符分割</string>
    <string name="desc_string_decode">将一个多字节的字符流转换为一个Observable，它按字符边界发射字节数组</string>
    <string name="desc_string_encode">对一个发射字符串的Observable执行变换操作，变换后的Observable发射一个在原始字符串中表示多字节字符边界的字节数组</string>
    <string name="desc_string_from">将一个字符流或者Reader转换为一个发射字节数组或者字符串的Observable</string>
    <string name="desc_string_join">将一个发射字符串序列的Observable转换为一个发射单个字符串的Observable，后者用一个指定的字符串连接所有的字符串</string>
    <string name="desc_string_split">将一个发射字符串的Observable转换为另一个发射字符串的Observable，后者使用一个指定的正则表达式边界分割前者发射的所有字符串</string>
    <string name="desc_string_stringConcat">将一个发射字符串序列的Observable转换为一个发射单个字符串的Observable，后者连接前者发射的所有字符串</string>

    <string name="desc_scheduler_io">用于计算任务，如事件循环或和回调处理，不要用于IO操作(IO操作请使用Schedulers.io())；默认线程数等于处理器的数量</string>
    <string name="desc_scheduler_compute">用于IO密集型任务，如异步阻塞IO操作，这个调度器的线程池会根据需要增长</string>
    <string name="desc_scheduler_immediate">在当前线程立即开始执行任务</string>
    <string name="desc_scheduler_self_define">使用指定的自定义Executor作为调度器</string>
    <string name="desc_scheduler_new_thread">为每个任务创建一个新线程</string>
    <string name="desc_scheduler_trampoline">在当前线程的任务队列末尾插入任务</string>

    <string name="desc_reactive_stream_materialize"></string>
    <string name="desc_plugin_start_hook"></string>

    <string name="desc_observable_create_just">创建一个发射指定值的Observable.</string>
    <string name="desc_observable_create_from_future">将一个Future转换为Observable.</string>
    <string name="desc_observable_create_from_iterable">将一个Iterable转换为Observable.</string>
    <string name="desc_observable_create_repeat">创建一个发射特定数据重复多次的Observable.</string>
    <string name="desc_observable_create_repeatWhen">创建一个发射特定数据重复多次的Observable
        .重复发射行为由另一个Observable决定.</string>
    <string name="desc_observable_create_create">创建一个自定义数据发射行为的Observable.一个形式正确的有限Observable必须尝试调用观察者的onCompleted正好一次或者它的onError正好一次，而且此后不能再调用观察者的任何其它方法</string>
    <string name="desc_observable_create_defer">直到有观察者订阅时才创建Observable，并且为每个观察者创建一个新的Observable
        .</string>
    <string name="desc_observable_create_range">创建一个发射特定整数序列的Observable.</string>
    <string name="desc_observable_create_interval">创建一个按固定时间间隔发射整数序列的Observable.</string>
    <string name="desc_observable_create_timer">创建一个Observable，它在一个给定的延迟后发射一个特殊的值.</string>
    <string name="desc_observable_create_empty">创建一个只发射onComplete空的Observable.</string>
    <string name="desc_observable_create_error">创建一个只发射一个onError事件的Observable.</string>
    <string name="desc_observable_create_never">创建一个什么都不发射的Observable.</string>

    <string name="desc_math_averageInteger">序列平均数并发射</string>
    <string name="desc_math_averageLong">序列平均数并发射</string>
    <string name="desc_math_averageFloat">序列平均数并发射</string>
    <string name="desc_math_averageDouble">序列平均数并发射</string>
    <string name="desc_math_max">求序列最大值并发射</string>
    <string name="desc_math_maxBy">求最大key对应的值并发射</string>
    <string name="desc_math_min">求最小值并发射</string>
    <string name="desc_math_minBy">求最小Key对应的值并发射</string>
    <string name="desc_math_sumInteger">求和并发射</string>
    <string name="desc_math_sumLong">求和并发射</string>
    <string name="desc_math_sumFloat">求和并发射</string>
    <string name="desc_math_sumDouble">求和并发射</string>
    <string name="desc_math_concat">顺序连接多个Observables</string>
    <string name="desc_math_count">计算数据项的个数并发射结果</string>
    <string name="desc_math_countLong">计算数据项的个数并发射结果</string>
    <string name="desc_math_reduce">对序列使用reduce()函数并发射reduce之后的结果</string>
    <string name="desc_math_collect">将原始Observable发射的数据放到一个单一的可变的数据结构中，然后返回一个发射这个数据结构的Observable
        .</string>
    <string name="desc_math_toList">收集原始Observable发射的所有数据到一个列表，然后返回这个列表</string>
    <string name="desc_math_toSortedList">收集原始Observable发射的所有数据到一个有序列表，然后返回这个列表</string>
    <string name="desc_math_toMap">将序列数据转换为一个Map，Map的key是根据一个函数计算的.</string>
    <string name="desc_math_toMultiMap">将序列数据转换为一个列表，同时也是一个Map，Map的key是根据一个函数计算的</string>

    <string name="desc_filter_filter">只发射通过了符合指定条件的数据项</string>
    <string name="desc_filter_takeLast">发射Observable发射的满足某个条件的最后一项最后N项数据</string>
    <string name="desc_filter_last">只发射最后一项数据</string>
    <string name="desc_filter_lastOrDefault">只发射最后一项数据,如果为空,则返回默认数据</string>
    <string name="desc_filter_takeLastBuffer">将最后发射的N项数据收集在一起发射一次</string>
    <string name="desc_filter_skip">忽略Observable发射的前N项数据</string>
    <string name="desc_filter_skipLast">忽略Observable发射的后N项数据</string>
    <string name="desc_filter_take">只发射前面的N项数据</string>
    <string name="desc_filter_first">只发射第一项数据</string>
    <string name="desc_filter_takeFirst">发射Observable发射的满足某个条件的第一项前N项数据</string>
    <string name="desc_filter_firstOrDefault">只发射第一项（或者满足某个条件的第一项）数据,如果为空则发射默认值</string>
    <string name="desc_filter_elementAt">只发射第N项数据</string>
    <string name="desc_filter_elementAtOrDefault">只发射第N项数据,如果为空发射默认值</string>
    <string name="desc_filter_sample">定期发射Observable最近发射的数据项</string>
    <string name="desc_filter_throttleLast">发射一段时间以内的最后一个数据项</string>
    <string name="desc_filter_throttleFirst">发射一段时间以内的第一个数据项</string>
    <string name="desc_filter_throttleWithTimeout">如果超时时间间隔之后Observable没有发射数据则发射一个数据</string>
    <string name="desc_filter_debounce">仅在过了一段指定的时间还没发射数据时才发射一个数据,用于过滤掉发射速率过快的数据项</string>
    <string name="desc_filter_timeout">如果过了一个指定的时长仍没有发射数据，它会发一个错误通知</string>
    <string name="desc_filter_distinct">过滤掉重复的数据项</string>
    <string name="desc_filter_distinctUntilChanged">过滤掉连续相同的重复的数据项</string>
    <string name="desc_filter_ofType">发射Observable中某个特定类型的数据项</string>
    <string name="desc_filter_ignoreElements">不发射任何数据，只发射Observable的终止通知</string>

    <string name="desc_error_handler_onErrorResumeNext">发生错误时，切换到一个备用的Observable继续发射数据</string>
    <string name="desc_error_handler_onErrorReturn">发生错误时，发射指定值</string>
    <string name="desc_error_handler_onExceptionResumeNext">发生异常时，切换到一个备用的Observable继续发射数据</string>
    <string name="desc_error_handler_retry">发生错误时,尝试重新订阅</string>
    <string name="desc_error_handler_retryWhen">发生错误时,将错误交给另一个Observable决定重试策略</string>

    <string name="desc_custormer_operator_customeOperator">自定义Operator</string>
    <string name="desc_connectable_obervable_connect">让一个可连接的Observable开始发射数据给订阅者</string>
    <string name="desc_connectable_obervable_publish">将普通的Observable转换为可连接的Observable</string>
    <string name="desc_connectable_obervable_replay">保证所有的观察者收到相同的数据序列，即使它们在Observable开始发射数据之后才订阅</string>
    <string name="desc_connectable_obervable_refCount">让一个可连接的Observable行为像普通的Observable</string>

    <string name="desc_condition_amb">给定多个Observable，只让第一个发射数据的Observable发射全部数据</string>
    <string name="desc_condition_defaultIfEmpty"> 发射来自原始Observable的数据，如果原始Observable没有发射数据，就发射一个默认数据</string>
    <string name="desc_condition_doWhile"> 发射原始Observable的数据序列，然后重复发射这个序列直到不满足这个条件为止</string>
    <string name="desc_condition_ifThen">只有当某个条件为真时才发射原始Observable的数据序列，否则发射一个空的或默认的序列</string>
    <string name="desc_condition_skipUtil">丢弃原始Observable发射的数据，直到第二个Observable发射了一个数据，然后发射原始Observable的剩余数据</string>
    <string name="desc_condition_skipWhile">丢弃原始Observable发射的数据，直到一个特定的条件为假，然后发射原始Observable剩余的数据</string>
    <string name="desc_condition_switchcase">基于一个计算结果，发射一个指定Observable的数据序列</string>
    <string name="desc_condition_takeUntil">发射来自原始Observable的数据，直到第二个Observable发射了一个数据或一个通知</string>
    <string name="desc_condition_takeWhile">发射原始Observable的数据，直到一个特定的条件为真，然后跳过剩余的数据</string>
    <string name="desc_condition_takeWhileWithIndex">发射原始Observable的数据，直到一个特定的条件为真，然后跳过剩余的数据</string>
    <string name="desc_condition_WhileDo">如果满足一个条件，发射原始Observable的数据，然后重复发射直到不满足这个条件为止</string>
    <string name="desc_combine_startWith">在数据序列的开头增加一项数据</string>
    <string name="desc_combine_merge">将多个Observable合并为一个</string>
    <string name="desc_combine_mergeDelayError">合并多个Observables，让没有错误的Observable都完成后再发射错误通知</string>
    <string name="desc_combine_zip">使用一个函数组合多个Observable发射的数据集合，然后再发射这个结果</string>
    <string name="desc_combine_and_then_when">通过模式和计划组合多个Observables发射的数据集合</string>
    <string name="desc_combine_combineLatest">当两个Observables中的任何一个发射了一个数据时，通过一个指定的函数组合每个Observable发射的最新数据（一共两个数据），然后发射这个函数的结果</string>
    <string name="desc_combine_join">无论何时，如果一个Observable发射了一个数据项，只要在另一个Observable发射的数据项定义的时间窗口内，就将两个Observable发射的数据合并发射</string>
    <string name="desc_combine_groupjoin">无论何时，如果一个Observable发射了一个数据项，只要在另一个Observable发射的数据项定义的时间窗口内，就将两个Observable发射的数据合并发射</string>
    <string name="desc_combine_switchIfEmpty">如果Observable为空就切换到另一个Observable.</string>
    <string name="desc_combine_switchOnNext">将一个发射Observables的Observable转换成另一个Observable，后者发射这些Observables最近发射的数据</string>

    <string name="desc_condition_all">判断是否所有的数据项都满足某个条件</string>
    <string name="desc_condition_contains">判断Observable是否会发射一个指定的值</string>
    <string name="desc_condition_exits">判断Observable是否发射了一个值</string>
    <string name="desc_condition_isEmpty">判断Observable是否为空</string>
    <string name="desc_condition_sequenceEqual">判断两个Observables发射的序列是否相等</string>

    <string name="desc_blocking_observable_forEach">对Observable发射的每一项数据调用一个方法，会阻塞直到Observable完成</string>
    <string name="desc_blocking_observable_first">阻塞直到Observable发射了一个数据，然后返回第一项数据</string>
    <string name="desc_blocking_observable_firstOrDefault">阻塞直到Observable发射了一个数据或者终止，返回第一项数据，或者返回默认值</string>
    <string name="desc_blocking_observable_last">阻塞直到Observable终止，然后返回最后一项数据</string>
    <string name="desc_blocking_observable_lastOrDefault">阻塞直到Observable终止，然后返回最后一项的数据，或者返回默认值</string>
    <string name="desc_blocking_observable_mostRecent">返回一个总是返回Observable最近发射的数据的iterable</string>
    <string name="desc_blocking_observable_next">返回一个Iterable，会阻塞直到Observable发射了另一个值，然后返回那个值</string>
    <string name="desc_blocking_observable_latest">返回一个iterable，会阻塞直到或者除非Observable发射了一个iterable没有返回的值，然后返回这个值</string>
    <string name="desc_blocking_observable_single">如果Observable终止时只发射了一个值，返回那个值，否则抛出异常</string>
    <string name="desc_blocking_observable_singleOrDefault">如果Observable终止时只发射了一个值，返回那个值，否则否好默认值</string>
    <string name="desc_blocking_observable_toFuture">将Observable转换为一个Future</string>
    <string name="desc_blocking_observable_toIterable">将一个发射数据序列的Observable转换为一个Iterable</string>
    <string name="desc_blocking_observable_getIterator">将一个发射数据序列的Observable转换为一个Iterator</string>


    <string name="desc_async_start">从一个Action创建Observable，它执行这个函数并发射函数的返回值
        </string>
    <string name="desc_async_toAsync">将一个Function或者Action转换为Observable，它执行这个函数并发射函数的返回值(注意：其返回值是一个Func0)</string>
    <string name="desc_async_startFuture">将一个返回Future的函数转换为一个Observable，它发射Future的返回值</string>
    <string name="desc_async_deferFuture">将一个返回Observable的Future转换为一个Observable，但是并不尝试获取这个Future返回的Observable，直到有订阅者订阅它</string>
    <string name="desc_async_forEachFuture">传递Subscriber方法给一个Observable，但是同时表现得像一个Future
        一样阻塞直到它完成</string>
    <string name="desc_async_fromAction">将一个Action转换为Observable，当一个订阅者订阅时，它执行这个action并发射它的返回值</string>
    <string name="desc_async_fromCallable">将一个Callable转换为Observable，当一个订阅者订阅时，它执行这个Callable并发射Callable的返回值，或者发射异常</string>
    <string name="desc_async_fromRunnable">将一个Runnable转换为Observable，当一个订阅者订阅时，它执行这个Runnable并发射Runnable的返回值</string>
    <string name="desc_async_runAsync">返回一个StoppableObservable，它发射某个Scheduler上指定的Action生成的多个actions</string>
</resources>
